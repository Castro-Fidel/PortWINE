#!/bin/bash
# Author: PortWINE-Linux.ru
########################################################################
clear && echo '
████─████─████─███─█───█─███─█──█─███
█──█─█──█─█──█──█──█───█──█──██─█─█
████─█──█─████──█──█─█─█──█──█─██─███
█────█──█─█─█───█──█████──█──█──█─█
█────████─█─█───█───█─█──███─█──█─███

'
########################################################################
[ $(id -u) = 0 ] && echo "Do not run this script as root!" && zenity --error --text "Do not run this script as root!" && exit 1
if [ "${s_install}" != "1" ] && [ ! -x "`which "zenity" 2>/dev/null`" ];then
    echo "You will need to install: zenity, and restart the port." 
    xdg-open "http://portwine-linux.ru/portwine-faq/" > /dev/null 2>&1 & exit 0
fi
########################################################################
sszen() {
zenity --progress --title="Settings..." --text="Updating start parameters" --pulsate --auto-close --auto-kill --width=450
} 
########################################################################
pwzen() {
zenity --progress --title="Settings..." --text="Please wait!" --pulsate --auto-close --auto-kill --width=450
} 
########################################################################
ulimit -c unlimited
cd "$(dirname "`readlink -f "$0"`")"
export PORT_SCRIPTS_PATH="$(pwd)"
cd "${PORT_SCRIPTS_PATH}/../../"
export PORT_WINE_PATH="$(pwd)"
read "portname" < "${PORT_WINE_PATH}/data/tmp/portname"
export portname
cd "${PORT_SCRIPTS_PATH}"
. "${PORT_SCRIPTS_PATH}/vars/${portname}_vars"
########################################################################
export PORT_WINE_TMP_PATH="${PORT_WINE_PATH}/data/tmp"
if [ ! -d "${PORT_WINE_TMP_PATH}" ]; then
	mkdir -p "${PORT_WINE_TMP_PATH}"
fi
if [ ! -d "${HOME}/.PortWINE/tmp" ]; then
	mkdir -p "${HOME}/.PortWINE/tmp"
fi
if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_loc" ]; then
	SET_LANG=`zenity --title  "Install $portname" --text "Select the language" --list --radiolist \
	--column="Set:" --column "Language:" \
	TRUE "RUS" \
	FALSE "ENG" `
	echo "${SET_LANG}" > "${PORT_WINE_TMP_PATH}/${portname}_loc"
fi
########################################################################
. "${PORT_SCRIPTS_PATH}"/lang
if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_ver" ]; then
	echo "10" > "${PORT_WINE_TMP_PATH}/${portname}_ver"
fi
########################################################################
export pw_libs_ver="_v4"
export port_on_run="${PORT_WINE_PATH}/data/port_on"
export WINEDIR="${PORT_WINE_PATH}"/data/dist
export WINELIB="${HOME}/.PortWINE/libs${pw_libs_ver}"
export WINEARCH=win64
export WINEPREFIX="${PORT_WINE_PATH}/data/pfx"
export WINESTART="C:\\windows\\command\\start.exe"
export PW_COMPAT_DATA_PATH="${PORT_WINE_PATH}/data/"
export PW_COMPAT_MEDIA_PATH="${PW_COMPAT_MEDIA_PATH}"
export PW_RUNTIME="$WINELIB/run.sh"
########################################################################
export urlg="https://portwine-linux.ru/portwine-faq/"
export PW_FTP_URL="https://portwine-linux.ru/ftp"
########################################################################
export PW_TERM=""
#if [ ! -f "${PORT_WINE_TMP_PATH}/init_run_suc" ]; then
#    export PW_USE_TERMINAL="1"
#fi
########################################################################
START_PORTWINE ()
{
if [ "${PW_USE_TERMINAL}" = "1"  ]; then
    if [ -x "`which konsole 2>/dev/null`" ]; then
        export PW_TERM="konsole -e"
    elif [ -x "`which xterm 2>/dev/null`" ]; then
        export PW_TERM="xterm -e"
    elif [ -x "`which gnome-terminal 2>/dev/null`" ]; then
        export PW_TERM="gnome-terminal -- $SHELL -c" 
    elif [ -x "`which lxterminal 2>/dev/null`" ]; then
        export PW_TERM="lxterminal -e" 
#    elif [ -x "`which xfce4-terminal 2>/dev/null`" ]; then
#        export PW_TERM="xfce4-terminal -x" #test
    fi
fi
sh "${PORT_SCRIPTS_PATH}"/port_update 
########################################################################
if [ ! -d "${WINELIB}" ]; then 
    echo "Download and install libraries..."
    wget -c -T 2 --output-document="${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" "${PW_FTP_URL}"/dist/libs${pw_libs_ver}.tar.xz | sszen &&
    tar -Jxvf "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" -C "${HOME}/.PortWINE/" | sszen &&
    rm -f "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz"
    "${WINELIB}"/setup.sh --force
fi
if [ -d "${WINELIB}" ]; then 
    echo "######################################################"
    echo "Runtime libraries is enabled"
#    "${PW_RUNTIME}" --print-steam-runtime-library-paths
else
    echo "######################################################"
    echo "Runtime libraries is disabled"
fi
########################################################################
if [ ! -f "${PORT_WINE_TMP_PATH}/dxvk_on" ]
then
    start_settings=`zenity --title  "${ss_title}" --text "${ss_text}" --list --radiolist \
    --column="${inst_set}" --column "${ss_ver}" --column "${ss_dr}"  --width=500 --height=220 \
    TRUE "DXVK" "${ss_ogl_3}" \
    FALSE "VKD3D and OpenGL" "${ss_ogl_2}" ` 
    if [ $? -eq 1 ];then exit 1; fi
    case $start_settings in
    "VKD3D and OpenGL") 
            echo "off" > "${PORT_WINE_TMP_PATH}/dxvk_on" ;;   
    "DXVK") 
            hud_settings=`zenity --list --title  "HUD" --text "${hud_text}" --list --checklist \
            --column="${inst_set}" --column="HUD info:" --column="${hud_info}" --width=800 --height=550 \
            FALSE "fps" "${hud_fps}" \
            FALSE "devinfo" "${hud_devinfo}" \
            FALSE "frametimes" "${hud_frametimes}" \
            FALSE "submissions" "${hud_submissions}" \
            FALSE "drawcalls" "${hud_drawcalls}" \
            FALSE "pipelines" "${hud_pipelines}" \
            FALSE "memory" "${hud_memory}" \
            FALSE "gpuload" "${hud_gpuload}" \
            FALSE "version" "${hud_version}" \
            FALSE "api" "${hud_api}" \
            FALSE "compiler" "${hud_compiler}" \
            FALSE "samplers" "${hud_samplers}" `

            if [ ! -z $hud_settings ]; then
                for hud_set in $hud_settings
                do
                    echo "${hud_set}" >> "${PORT_WINE_TMP_PATH}/dxvk_on" 
                done  
                sed -i "s/|/,/g" "${PORT_WINE_TMP_PATH}/dxvk_on" 
            else
                echo "0" > "${PORT_WINE_TMP_PATH}/dxvk_on"
            fi ;;
    esac  
fi

if [ ! -z $dxvk_ogl_var ]; then
    var_dxvk_on="${dxvk_ogl_var}"
else
    read "var_dxvk_on" < "${PORT_WINE_TMP_PATH}/dxvk_on"
fi
export DXVK_HUD="${var_dxvk_on}"
echo "DXVK_HUD=${DXVK_HUD}"

if [ "${var_dxvk_on}" != "off" ]; then
    export PW_USE_WINED3D=0
    export PW_DXGI_FROM_DXVK=1
    if [ -d "${WINEDIR}_dxvk" ]; then
        export WINEDIR="${WINEDIR}_dxvk"
    fi
    echo "Use DXVK and D9VK (DX9-DX11 to Vulkan)"

else
    export PW_USE_WINED3D=1
    export PW_VKD3D_FEATURE_LEVEL=1
    export VKD3D_CONFIG=force_bindless_texel_buffer
    if [ -d "${WINEDIR}_vkd3d" ]; then
        export WINEDIR="${WINEDIR}_vkd3d"
    fi
    echo "Use OpenGL and VKD3D (DX9-DX11 to OpenGL and DX12 to vulkan)"
fi

export WINELOADER="${WINEDIR}/bin/wine"
export WINEDLLPATH="${WINEDIR}/lib64/wine:${WINEDIR}/lib/wine"
export WINESERVER="${WINEDIR}/bin/wineserver"
export PATH="${WINEDIR}/bin:${PATH}"

cp -f "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEDIR}"/lib/wine/dxgi.dll
cp -f "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEDIR}"/lib64/wine/dxgi.dll

export DXVK_STATE_CACHE_PATH="${PATH_TO_GAME}"
export DXVK_STATE_CACHE=1
export STAGING_SHARED_MEMORY=1

########################################################################
export optirun_on=
export check_optimus_manager=
export PW_NVIDIA="$(lspci | grep NVIDIA)" 
if [ -x "`which optimus-manager 2>/dev/null`" ]; then
    export check_optimus_manager=`optimus-manager --status | grep Current | cut -f 2 -d':' | sed -e 's/^[[:space:]]*//'`
fi
if [ ! -z "${PW_NVIDIA}" ] && [ "${check_optimus_manager}" != "intel" ]; then
    if [ "${check_optimus_manager}" = "nvidia" ]; then
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
    elif [ -x "`which primusrun 2>/dev/null`" ]; then
        export optirun_on="primusrun"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    elif [ -x "`which optirun 2>/dev/null`" ]; then
        export optirun_on="optirun -b primus"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    elif [ -x "`which prime-run 2>/dev/null`" ]; then
        export optirun_on="prime-run"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    fi
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __GL_SHADER_DISK_CACHE_PATH="${PATH_TO_GAME}" 
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE=1000000000
    export __GL_THREADED_OPTIMIZATIONS=1
    export __GL_DXVK_OPTIMIZATIONS=1
else
    export DRI_PRIME=1
#    export MESA_GLSL_CACHE_DIR="${PATH_TO_GAME}"
#    export mesa_glthread=true
fi
case "$PW_FORCE_USE_VSYNC" in  # 0-FORCE_OFF, 1-FORCE_ON, 2-BY_DEFAULT
    "0")
    export vblank_mode=0
    export __GL_SYNC_TO_VBLANK=0 ;;
    "1")
    export vblank_mode=1
    export __GL_SYNC_TO_VBLANK=1 ;;  
esac
export DXVK_CONFIG_FILE="${PORT_WINE_PATH}/data/dxvk.conf"
########################################################################
export int_xneur=0
if [ $(pgrep xneur)>'0' ]; then
	killall xneur
	export int_xneur=1
fi 
export PW_XKBD="$(setxkbmap -query | grep -w ru | awk '{print($2)}')"
if [ ! -z ${PW_XKBD} ]; then
    setxkbmap us,ru
fi
########################################################################
if [ -x "`which "gamemoderun" 2>/dev/null`" ] && [ "$PW_FORCE_DISABLED_GAMEMOD" -eq "0" ]; then
    systemctl --user enable gamemoded.service 
    systemctl --user restart gamemoded.service
    export PW_GAMEMODERUN=1
    echo "Gamemod will be launched."
else
    export PW_GAMEMODERUN=0
    echo "Gamemod is not installed or disabled in vars script: PW_FORCE_DISABLED_GAMEMOD=$PW_FORCE_DISABLED_GAMEMOD"
fi
echo "######################################################"
########################################################################
sed -i '/HKCU,Software\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf &&
sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf &&
sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf &&
sed -i '/HKCR,steam\\shell\\open\\command/d' "${WINEDIR}"*/share/wine/wine.inf &&
rm -f  "${WINEDIR}"*/lib*/wine/*steam*
if [ ! -d "${WINEPREFIX}" ] || [ ! -d "${WINEPREFIX}"/dosdevices ] || [ ! -d "${WINEPREFIX}"/drive_c/windows ] || [ ! -f "${WINEPREFIX}"/system.reg ] || [ ! -f "${WINEPREFIX}"/user.reg ] || [ ! -f "${WINEPREFIX}"/userdef.reg ]; then
    $PW_TERM "${PW_RUNTIME}"  "${WINELOADER}" wineboot -u
fi
########################################################################
#if [ ! -f "${PORT_WINE_TMP_PATH}/init_run_suc" ]; then
#    "${PW_RUNTIME}" "${port_on_run}" "init_run"
#    if [ -f "${PORT_WINE_TMP_PATH}"/winetricks ]; then
#        rm -f "${PORT_WINE_TMP_PATH}"/winetricks
#    fi
#    wget -T 3 --output-document=${PORT_WINE_TMP_PATH}/winetricks https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
#    chmod +x "${PORT_WINE_TMP_PATH}/winetricks"
#    PW_INIT_RUN 
#    echo "#####################PW_INIT_RUN######################"
#    cat "${PORT_WINE_TMP_PATH}/init_run_suc"
#    echo "######################################################"
#fi
########################################################################
ADD_IN_START_PORTWINE
} 
########################################################################
WAIT_WINESERVER ()
{
sleep 3
while [ $(pgrep wineserver)>'0' ]; do
	sleep 1
done
}
########################################################################
STOP_PORTWINE ()
{
WAIT_WINESERVER
ADD_IN_STOP_PORTWINE
if [ "$int_xneur" = "1"  ]; then
	xneur &
fi
if [ ! -z ${PW_XKBD} ]; then
    setxkbmap ${PW_XKBD}
fi
#killall -r -s9 winedevice 
rm -f "${PORT_WINE_PATH}"/0
rm -f "${PORT_SCRIPTS_PATH}"/0
}
